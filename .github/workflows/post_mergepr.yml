# SPDX-FileCopyrightText: (C) 2025 Tenstorrent AI ULC
# SPDX-License-Identifier: Apache-2.0

name: Update Status

on:
    workflow_dispatch:
    # push:
    #   branches:
    #     - main

jobs:
  update-status-for-main-branch:
    runs-on: tt-ubuntu-2204-large-stable
    strategy:
      max-parallel: 5

    env:
      GIST_ID: 'c230835a5065366c13d3bbfb79f23bf6'
      GIST_TOKEN: ${{ secrets.POLARIS_BIG_GIST_TOKEN }}
      REPO_NAME: ${{ github.event.repository.name }}
      GITHUB_REF: ${{ github.ref }}
      GITHUB_SHA: ${{ github.sha }}
      PASS_YELLOW: 75
      PASS_REQUIRED: 95
      COVERAGE_YELLOW: 75
      COVERAGE_REQUIRED: 85

    defaults:
      run:
        shell: bash -el {0}

    steps:
    - id: checkout
      name: Checkout
      uses: actions/checkout@v4

    - id: download-required-files-from-lfc
      name: Download required files from LFC
      uses: ./.github/actions/lfcdownload

    - id: setup-mamba-developer
      name: Setup mamba - developer
      if: '!cancelled()'
      uses: ./.github/actions/setup_mamba
      with:
        environment-file: envdev.yaml
        environment-name: poldevenv

    - id: update-status-for-main-branch
      name: Update Status for Main Branch
      run: | 
        coverage erase
        coverage run -m pytest -m "not slow and not tools_secondary" --json-report --json-report-file __ci/json/pyunit.json
        coverage combine
        coverage report 
        coverage html -d __ci/html/
        coverage json -o __ci/json/coverage.json

    - id: prepare-test-stats-for-gist-badges
      name: Prepare Test Stats for Gist Badges
      run: |
        jq .summary __ci/json/pyunit.json > __ci/json/pyunit.summary.json
        jq .totals __ci/json/coverage.json > __ci/json/coverage.totals.json
        python tools/ci/makegist.py --gist-id ${{ env.GIST_ID }} --gist-filename ${{ env.REPO_NAME }}_unittestssummary.json --input-file __ci/json/pyunit.summary.json repo=$GITHUB_REPOSITORY branch=$GITHUB_REF sha=$GITHUB_SHA
        python tools/ci/makegist.py --gist-id ${{ env.GIST_ID }} --gist-filename ${{ env.REPO_NAME }}_unittestscoverage.json --input-file __ci/json/coverage.totals.json repo=$GITHUB_REPOSITORY branch=$GITHUB_REF sha=$GITHUB_SHA
        echo TOTAL_TESTS=$(jq .summary.total __ci/json/pyunit.json) >> $GITHUB_ENV
        echo PASSED_TESTS=$(jq .summary.passed __ci/json/pyunit.json) >> $GITHUB_ENV
        echo COVERAGE_PERCENTAGE=$(jq .totals.percent_covered __ci/json/coverage.json) >> $GITHUB_ENV

    - id: generate-badge-json
      name: Generate Badge JSON
      env:
        PASS_YELLOW: ${{ env.PASS_YELLOW }}
        PASS_REQUIRED: ${{ env.PASS_REQUIRED }}
        COVERAGE_YELLOW: ${{ env.COVERAGE_YELLOW }}
        COVERAGE_REQUIRED: ${{ env.COVERAGE_REQUIRED }}
        COVERAGE_PERCENTAGE: ${{ env.COVERAGE_PERCENTAGE }}
        PASSED_TESTS: ${{ env.PASSED_TESTS }}
        TOTAL_TESTS: ${{ env.TOTAL_TESTS }}
      run: |
        COVERAGE_MESSAGE=$(printf "%.2f" $COVERAGE_PERCENTAGE)%
        TESTS_MESSAGE="$PASSED_TESTS/$TOTAL_TESTS"
        PASS_PERCENTAGE=$(expr $PASSED_TESTS \* 100 / $TOTAL_TESTS)
        COVERAGE_COLOR=$(python3 tools/ci/colorpicker.py --value $COVERAGE_PERCENTAGE --highcolor brightgreen $COVERAGE_YELLOW red $COVERAGE_REQUIRED yellow)
        TESTS_COLOR=$(python3 tools/ci/colorpicker.py --value $PASS_PERCENTAGE --highcolor brightgreen $PASS_YELLOW red $PASS_REQUIRED yellow)
        python tools/ci/makegist.py --gist-id ${{ env.GIST_ID }} --gist-filename ${{ env.REPO_NAME }}_tests_badge.json  label="Unit Tests" message="$TESTS_MESSAGE"    color="$TESTS_COLOR"
        python tools/ci/makegist.py --gist-id ${{ env.GIST_ID }} --gist-filename ${{ env.REPO_NAME }}_coverage_badge.json  label="Coverage" message="$COVERAGE_MESSAGE" color="$COVERAGE_COLOR"
  

    - id: upload-artifacts
      name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: dump-unit-and-coverage-tests
        path: |
           .coverage
           __ci/json
           __ci/html
    
    
    # - name: Lint with flake8
    #   run: |
    #     conda install flake8
    #     # stop the build if there are Python syntax errors or undefined names
    #     flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
    #     # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
    #     flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
