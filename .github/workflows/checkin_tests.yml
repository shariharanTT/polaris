# SPDX-FileCopyrightText: (C) 2025 Tenstorrent AI ULC
# SPDX-License-Identifier: Apache-2.0

name: Checkin Tests

on:
  workflow_dispatch:
  push:
  pull_request:
    branches:
      - main
  merge_group:
    branches:
    - main

jobs:
  checkin-tests:
    env:
      GIST_ID: 'c230835a5065366c13d3bbfb79f23bf6'
      GIST_TOKEN: ${{ secrets.POLARIS_GIST_TOKEN }}
      REPO_NAME: ${{ github.event.repository.name }}
      GITHUB_REF: ${{ github.ref }}
      GITHUB_SHA: ${{ github.sha }}
      PASS_YELLOW: 75
      PASS_REQUIRED: 95
      COVERAGE_YELLOW: 75
      COVERAGE_REQUIRED: 85

    runs-on: tt-ubuntu-2204-large-stable
    strategy:
      max-parallel: 5

    defaults:
      run:
        shell: bash -el {0}

    steps:
    - id: checkout
      name: Checkout
      uses: actions/checkout@v4

    - id: lfcdownload
      name: Download required files from LFC
      uses: ./.github/actions/lfcdownload

    - id: setup-mamba
      name: Setup mamba - developer
      if: '!cancelled()'
      uses: ./.github/actions/setup_mamba
      with:
        environment-file: envdev.yaml
        environment-name: poldevenv

    - id: run-unit-and-coverage-tests
      name: Run Unit and Coverage Tests
      if: '!cancelled()'
      uses: ./.github/actions/run-python-tests

    - id: run-static-analysis
      name: Run Static Analysis
      if: '!cancelled()'
      uses: ./.github/actions/run-static-analysis

    - id: run-rtl-tests
      name: Run RTL Tests
      if: '!cancelled()'
      continue-on-error: true
      uses: ./.github/actions/run-rtl-tests
      with:
        tag: sep23
        parallel: 4
        lfc-files: 'ext_rtl_test_data_set_sep23.tar.gz'
        results-file: 'rtl_test_results.txt'

    - id: generate-test-badges
      name: Generate Test and Coverage Badges
      if: ${{ !cancelled() && github.event_name == 'push' && github.ref == 'refs/heads/main' }}
      uses: ./.github/actions/generate-test-badges
      with:
        gist-id: ${{ env.GIST_ID }}
        gist-token: ${{ env.GIST_TOKEN }}
        repo-name: ${{ env.REPO_NAME }}
        coverage-yellow-threshold: ${{ env.COVERAGE_YELLOW }}
        coverage-required-threshold: ${{ env.COVERAGE_REQUIRED }}
        test-yellow-threshold: ${{ env.PASS_YELLOW }}
        test-required-threshold: ${{ env.PASS_REQUIRED }}

    - id: generate-status-badges
      name: Generate Status Badges
      if: ${{ !cancelled() && github.event_name == 'push' && github.ref == 'refs/heads/main' }}
      uses: ./.github/actions/generate-status-badges
      with:
        gist-id: ${{ env.GIST_ID }}
        gist-token: ${{ env.GIST_TOKEN }}
        repo-name: ${{ env.REPO_NAME }}
        static-tests-outcome: ${{ steps.run-static-analysis.outputs.static-tests-outcome }}
        spdx-tests-outcome: ${{ steps.run-static-analysis.outputs.license-checks-outcome }}

    - id: generate-rtl-badges
      name: Generate RTL Badges
      if: ${{ !cancelled() && github.event_name == 'push' && github.ref == 'refs/heads/main' }}
      uses: ./.github/actions/generate-rtl-badges
      with:
        gist-id: ${{ env.GIST_ID }}
        gist-token: ${{ env.GIST_TOKEN }}
        repo-name: ${{ env.REPO_NAME }}
        rtl-outcome: ${{ steps.run-rtl-tests.outputs.outcome }}
        rtl-exit-code: ${{ steps.run-rtl-tests.outputs.exit-code }}
        results-file: ${{ steps.run-rtl-tests.outputs.results-file }}

    - id: upload-artifacts
      name: Upload artifacts
      if: '!cancelled()'
      uses: actions/upload-artifact@v4
      with:
        name: checkin_artifacts
        path: |
           .coverage
           __ci/json
           __ci/html
           __RUN_TESTS
           !__RUN_TESTS/**/*.onnx

    - id: upload-rtl-artifacts
      name: Upload RTL artifacts
      if: '!cancelled()'
      uses: actions/upload-artifact@v4
      with:
        name: rtl_artifacts
        path: |
           ${{ steps.run-rtl-tests.outputs.results-file }}
           __llk_out/*.json
           __llk_out/*.csv
           __llk_out/*.png

    - id: check-overall-success
      name: Check Overall Success
      if: '!cancelled()'
      run: |
        echo "Checking overall job success status..."
        echo "This step will succeed ONLY if ALL prior steps have succeeded, regardless of continue-on-error settings"
        echo ""
        
        # Track steps that are not successful
        NON_SUCCESS_STEPS=""
        
        # Check all test and processing steps - must be 'success' to pass
        if [[ "${{ steps.run-unit-and-coverage-tests.outcome }}" != "success" ]]; then
          echo "‚ùå Unit and coverage tests: ${{ steps.run-unit-and-coverage-tests.outcome }}"
          NON_SUCCESS_STEPS="$NON_SUCCESS_STEPS run-unit-and-coverage-tests(${{ steps.run-unit-and-coverage-tests.outcome }})"
        else
          echo "‚úÖ Unit and coverage tests: success"
        fi
        
        if [[ "${{ steps.run-static-analysis.outcome }}" != "success" ]]; then
          echo "‚ùå Static analysis: ${{ steps.run-static-analysis.outcome }}"
          NON_SUCCESS_STEPS="$NON_SUCCESS_STEPS run-static-analysis(${{ steps.run-static-analysis.outcome }})"
        else
          echo "‚úÖ Static analysis: success"
        fi
        
        if [[ "${{ steps.run-rtl-tests.outcome }}" != "success" ]]; then
          echo "‚ùå RTL tests: ${{ steps.run-rtl-tests.outcome }}"
          NON_SUCCESS_STEPS="$NON_SUCCESS_STEPS run-rtl-tests(${{ steps.run-rtl-tests.outcome }})"
        else
          echo "‚úÖ RTL tests: success"
        fi
        
        if [[ "${{ steps.generate-test-badges.outcome }}" != "success" && "${{ steps.generate-test-badges.outcome }}" != "skipped" ]]; then
          echo "‚ùå Test badges generation: ${{ steps.generate-test-badges.outcome }}"
          NON_SUCCESS_STEPS="$NON_SUCCESS_STEPS generate-test-badges(${{ steps.generate-test-badges.outcome }})"
        else
          echo "‚úÖ Test badges generation: ${{ steps.generate-test-badges.outcome }}"
        fi
        
        if [[ "${{ steps.generate-status-badges.outcome }}" != "success" && "${{ steps.generate-status-badges.outcome }}" != "skipped" ]]; then
          echo "‚ùå Status badges generation: ${{ steps.generate-status-badges.outcome }}"
          NON_SUCCESS_STEPS="$NON_SUCCESS_STEPS generate-status-badges(${{ steps.generate-status-badges.outcome }})"
        else
          echo "‚úÖ Status badges generation: ${{ steps.generate-status-badges.outcome }}"
        fi
        
        if [[ "${{ steps.generate-rtl-badges.outcome }}" != "success" && "${{ steps.generate-rtl-badges.outcome }}" != "skipped" ]]; then
          echo "‚ùå RTL badges generation: ${{ steps.generate-rtl-badges.outcome }}"
          NON_SUCCESS_STEPS="$NON_SUCCESS_STEPS generate-rtl-badges(${{ steps.generate-rtl-badges.outcome }})"
        else
          echo "‚úÖ RTL badges generation: ${{ steps.generate-rtl-badges.outcome }}"
        fi
        
        if [[ "${{ steps.upload-artifacts.outcome }}" != "success" ]]; then
          echo "‚ùå Artifacts upload: ${{ steps.upload-artifacts.outcome }}"
          NON_SUCCESS_STEPS="$NON_SUCCESS_STEPS upload-artifacts(${{ steps.upload-artifacts.outcome }})"
        else
          echo "‚úÖ Artifacts upload: success"
        fi
        
        if [[ "${{ steps.upload-rtl-artifacts.outcome }}" != "success" ]]; then
          echo "‚ùå RTL artifacts upload: ${{ steps.upload-rtl-artifacts.outcome }}"
          NON_SUCCESS_STEPS="$NON_SUCCESS_STEPS upload-rtl-artifacts(${{ steps.upload-rtl-artifacts.outcome }})"
        else
          echo "‚úÖ RTL artifacts upload: success"
        fi
        
        # Succeed only if ALL steps succeeded
        if [[ -n "$NON_SUCCESS_STEPS" ]]; then
          echo ""
          echo "‚ùå Job failed - not all steps succeeded:$NON_SUCCESS_STEPS"
          echo "Overall job status: FAILED"
          exit 1
        else
          echo ""
          echo "üéâ ALL steps completed successfully!"
          echo "Overall job status: PASSED"
        fi
    
  userenv-tests:
    runs-on: tt-ubuntu-2204-large-stable
    strategy:
      max-parallel: 5

    defaults:
      run:
        shell: bash -el {0}

    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Setup mamba - user
      uses: ./.github/actions/setup_mamba
      with:
        environment-file: environment.yaml
        environment-name: poluserenv

    - name: userenv-checkin-tests
      if: '!cancelled()'
      run: |
        python checkin_tests.py workloads

    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: checkin_userenv_artifacts
        path: |
           __RUN_TESTS
           !__RUN_TESTS/**/*.onnx
    
    # - name: Lint with flake8
    #   run: |
    #     conda install flake8
    #     # stop the build if there are Python syntax errors or undefined names
    #     flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
    #     # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
    #     flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
